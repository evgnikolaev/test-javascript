/*
	Свойства и методы типов.
	Числа и строки.

	!!! Все типы по сути являются наследниками от СУПЕРТИПА,
	   поэтому имеют свойства и мтеоды  !!!
*/


/*
		1) ЧИСЛА

	   значения чисел                                         функции
			NaN - не число                                        	parseInt() - из строки в число
	 		Infinity - бесконечность                                  parseFloat() - из строки в число

		методы
			.toFixed(кол-во знаков, после запятой)  - вернет строку "12.0000"
*/
var a = 12;
var c = a.toFixed(6);
console.log(c);


/*
		2) СТРОКИ

		Обратный слеш
		   экранирование                                                     Спецсимволы
		   		'o\'nail' 														\n , \r  - перевод на новую строку (enter)
																				\s - символ пробела
			Символы в формате unicode												\t - символ табуляции
				\uXXXX - код символа ( например \u1027 )							\b  - символ backspace



		Свойства и методы строки
			.length  -  длина строки

			.charAt(порядковый номер)  -  доступ к символу в строке (если не существует, вернет пустую строку)
				строка[порядковый номер]  -  доступ к символу в строке (если не существует, вернет undefined)

			.toUpperCase()  -  регистр
			.toLowerCase()  -  регистр

			.indexOf('подстрока', 'позиция с которой искать'); - поиск первого вхождения с начала (вернет позицию) , если нет вернет -1
			.lastIndexOf('подстрока', 'позиция с которой искать'); - поиск первого вхождения с конца (вернет позицию) , если нет вернет -1
				if(pos != -1){ значит нашел}

			.substring('с какого', 'до какого - небязательный'); - вырезает подстроку (не включая последний)
			.substr('с какого', 'количество символов - небязательный'); - вырезает подстроку (не включая последний)
				.substr('-2'); - если передать отрицательное число, вырезает оставляя с конца n символов
			.slice('с какого', 'до какого - небязательный'); - Универсальный нож,
					работает как substring, но если передать вторым парамтром отрицательное, вернет без последних n символов

			.replace('что', 'на что'); - поменять первое вхождение (ресурсоемко)

			.charCodeAt('позиция в строке'); - получить код символа
			String.fromCharCode(символы); - возвращает строку, созданную из указанной последовательности значений единиц кода UTF-16. (у конструктора)

			.split(разделитель ( строка или регулярка))  - в массив по рзаделителю
			.search( строка или регулярка ) - возвращает только первую позицию

*/
var str1 = 'abcd';
console.log(str1.charAt(6));
console.log(str1[6]);
console.log(str1.toUpperCase());
console.log(str1.toLowerCase());

var str2 = 'Hello my world';
console.log(str2.indexOf(' ', 6));
console.log(str2.lastIndexOf(' '));

var str3 = 'Hello my world';
console.log(str3.substring(0, 5));
console.log(str3.substr(0, 2));
console.log(str3.substr(-3));
console.log(str3.slice(0, -3));
console.log(str3.replace('o', 'Q'));

console.log(str3.charCodeAt(1));
console.log(String.fromCharCode(65, 66, 67));

var mass = str3.split(' ');
console.log(mass);


/*
		1) МАССИВЫ

		Свойства и методы строки
			.length  -  длина массива (с подвохом , последний элемент плюс 1)  Доступна на запись, например чтобы обрезать маассив

			.pop()  - удаляется последний элемент с ключом, и возвращает последний
			.push(элемент)  - добавит последним

			.shift() - удаляется первый элемент с ключом, и возвращает первый, пересчитывются ключи (ресурсокмко)
			.unshift(элемент) - добавит первым, пересчитывются ключи (ресурсокмко)

			.join('\n') - в строку по разделителю
			.splice(стартовая позиция, сколько удалить, вставляем) - универсальный нож (удалить и вместо них вставить)
 */

var arr1 = [];
arr1[0] = 'string0';
arr1[1] = 'string1';
arr1[11] = '11'; //  !!! так делать плохо  !!!
arr1[12] = '12'; //  !!! так делать плохо  !!!
console.log(arr1.length);  //  13
arr1.pop();
arr1.push('last');
arr1.shift();
arr1.unshift('paste');
arr1.length = 10;
console.log(arr1.join('\n'));

var arr2 = [0, 1, 2, 3, 4, 5];
// delete arr2[3];//удалит значение 3, ключ оставит
arr2.splice(3, 1, 'new1', 'new2');


// пример 1
var inp = document.getElementById('inp');
var output = document.getElementById('output');
inp.addEventListener('keydown', check, false);

function check(e) {
	var str = this.value + (e.keyCode !== 8 ? e.key : '');
	if (str.length > 4 && e.keyCode !== 8) {
		e.preventDefault();
		inp.classList.add('err');
	} else {
		inp.classList.remove('err');
		output.innerHTML = str;
	}
}



















